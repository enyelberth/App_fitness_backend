// GENERADOR Y FUENTE DE DATOS
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================
// SECCIÓN: ADMINISTRACIÓN
// ===================
model Admin {
  id           String         @id
  firstName    String
  lastName     String
  dob          DateTime
  phone        String         @unique
  username     String         @unique
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  AccountAdmin AccountAdmin[]
}

model AccountAdmin {
  id                 String             @id
  userId             String             @unique
  admin              Admin              @relation(fields: [userId], references: [id])
  balance            Decimal            @default(0)
  transactions       TransactionAdmin[]
  accountTypeAdminId String?
  AccountTypeAdmin   AccountTypeAdmin?  @relation(fields: [accountTypeAdminId], references: [id])
  currencyId         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model AccountTypeAdmin {
  id           String         @id
  name         String
  AccountAdmin AccountAdmin[]
}

model TransactionAdmin {
  id             String        @id @default(uuid())
  amount         Decimal
  type           String // 'deposit', 'withdrawal', 'transfer'
  createdAt      DateTime      @default(now())
  AccountAdmin   AccountAdmin? @relation(fields: [accountAdminId], references: [id])
  accountAdminId String?
}

// ===================
// SECCIÓN: USUARIOS Y CUENTAS
// ===================
model User {
  id           Int            @id
  username     String         @unique
  email        String         @unique
  password     String
  accounts     Account[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
  Loan         Loan?
  Profile      Profile[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dob       DateTime
  address   String
  phone     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id          String      @id
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  typeId      Int
  type        AccountType @relation(fields: [typeId], references: [id])
  balance     Decimal     @default(0)
  transactions Transaction[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  currencyId  String?
  Currency    Currency?   @relation(fields: [currencyId], references: [id])
}

model AccountType {
  id       Int       @id @default(autoincrement())
  name     String
  accounts Account[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  amount    Decimal
  type      String // 'deposit', 'withdrawal', 'transfer'
  createdAt DateTime @default(now())
}

model Currency {
  id        String    @id @default(uuid())
  name      String
  symbol    String
  loans     Loan[]
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id           String   @id @default(uuid())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  amount       Decimal
  interestRate Decimal
  currencyId   String
  currency     Currency @relation(fields: [currencyId], references: [id])
  dueDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Modelo auth obsoleto, considerar eliminar o actualizar
model auth {
  id       Int    @id
  usename  String // Corregir a 'username' si se usa
  password String
}

// ===================
// SECCIÓN: FINANZAS PERSONALES
// ===================
model Categorias {
  id           Int             @id @default(autoincrement())
  name         String
  type         Type            @default(Ganancias)
  fecha        DateTime        @default(now())
  ingresos     Ingresos[]
  ingresoFijos IngresoFijos[]
  gastos       Gasto[]
  gastosFijos  GastoFijo[]
}

enum Type {
  Gasto
  Ganancias
}

model Ingresos {
  id          Int        @id @default(autoincrement())
  fecha       DateTime   @default(now())
  description String
  monto       Float
  categoriaId Int
  categoria   Categorias @relation(fields: [categoriaId], references: [id])
}

model IngresoFijos {
  id          Int        @id @default(autoincrement())
  fecha       DateTime   @default(now())
  description String
  monto       Float
  categoriaId Int
  categoria   Categorias @relation(fields: [categoriaId], references: [id])
}

model Gasto {
  id          Int        @id @default(autoincrement())
  fecha       DateTime   @default(now())
  description String
  monto       Float
  categoriaId Int
  categoria   Categorias @relation(fields: [categoriaId], references: [id])
}

model GastoFijo {
  id          Int        @id @default(autoincrement())
  fecha       DateTime   @default(now())
  description String
  monto       Float
  categoriaId Int
  categoria   Categorias @relation(fields: [categoriaId], references: [id])
}

// ===================
// SECCIÓN: PRODUCTOS Y CATEGORÍAS
// ===================
model Product {
  id                  Int                 @id @default(autoincrement())
  title               String              @db.VarChar(255)
  description         String
  price               Float
  quantity            Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  categoryProductId   Int
  subCategoryProductId Int
  category            CategoryProduct     @relation(fields: [categoryProductId], references: [id])
  subCategory         SubCategoryProduct  @relation(fields: [subCategoryProductId], references: [id])
}

model CategoryProduct {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  productos Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategoryProduct {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  productId Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===================
// SECCIÓN: FITNESS (CLIENTES, RUTINAS, EJERCICIOS)
// ===================
model Cliente {
  id             Int     @id @default(autoincrement())
  nombre         String
  apellido       String
  email          String     @unique
  telefono       String?
  fecha_registro DateTime   @default(now())
  rutinas        Rutina[]
  progreso       Progreso[]
}

model Rutina {
  id               Int           @id @default(autoincrement())
  nombre           String
  descripcion      String?
  cliente_id       Int?
  cliente          Cliente?         @relation(fields: [cliente_id], references: [id])
  rutinaEjercicios RutinaEjercicio[]
}

model Ejercicio {
  id                BigInt             @id @default(autoincrement())
  nombre            String
  descripcion       String?
  rutinaEjercicios  RutinaEjercicio[]
  ejercicioMusculos EjercicioMusculo[]
  progreso          Progreso[]
}

model RutinaEjercicio {
  id           Int     @id @default(autoincrement())
  rutina_id    Int?
  rutina       Rutina?    @relation(fields: [rutina_id], references: [id])
  ejercicio_id BigInt?
  ejercicio    Ejercicio? @relation(fields: [ejercicio_id], references: [id])
  repeticiones Int?
  series       Int?
}

model Musculo {
  id                BigInt             @id @default(autoincrement())
  nombre            String
  ejercicioMusculos EjercicioMusculo[]
}

model EjercicioMusculo {
  id           BigInt     @id @default(autoincrement())
  ejercicio_id BigInt?
  ejercicio    Ejercicio? @relation(fields: [ejercicio_id], references: [id])
  musculo_id   BigInt?
  musculo      Musculo?   @relation(fields: [musculo_id], references: [id])
}

model Progreso {
  id           BigInt     @id @default(autoincrement())
  cliente_id   Int?
  cliente      Cliente?   @relation(fields: [cliente_id], references: [id])
  ejercicio_id BigInt?
  ejercicio    Ejercicio? @relation(fields: [ejercicio_id], references: [id])
  fecha        DateTime   @default(now())
  repeticiones Int?
  peso         Decimal?
  comentarios  String?
}
